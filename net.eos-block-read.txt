using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.SessionState;
using Shop.Bussiness;
using System.Text;
using System.Timers;
using System.Threading;
using System.Net;
using System.IO;
using Shop.Tools;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using Newtonsoft.Json.Linq;

namespace Shop
{
    public class Global : System.Web.HttpApplication
    {
        System.Timers.Timer timer = null;
        Model.API.GetInfo infoRet = null;
        Bussiness.Extend_Transfer_Record bll = new Extend_Transfer_Record();
        long num = 1;
        void Application_Start(object sender, EventArgs e)
        {
            try
            {
                //3秒执行一次区块数据拉取
                if (timer != null)
                {
                    timer.Stop();
                    timer.Close();
                    timer = null;
                }
                long maxNum = bll.GetMaxBlockNum();
                if (maxNum > 0)
                {
                    num = maxNum;
                }
                int Interval = 10000 ;//10秒种  
                timer = new System.Timers.Timer(Interval);  
                timer.Elapsed += new System.Timers.ElapsedEventHandler(Timer_Elapsed);
                timer.Interval = Interval;
                timer.Enabled = true;
                timer.AutoReset = true;
                timer.Start();
                // 在应用程序启动时运行的代码
                //TimeWork tw = new TimeWork();//启动定时器
                //tw.work_databackup_start();
                //tw.work_email_start();
                //Event.Initialization();
            }
            catch (Exception ex)
            {
                LogUtil.WriteLog(ex.ToString());
            }
        }
        void Timer_Elapsed(object source, ElapsedEventArgs e)
        {
            try
            {
                // LogUtil.WriteLog(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + ":AutoTask is Working!");
                Task();
            }
            catch (Exception ee)
            {
                 LogUtil.WriteLog("=======69行========" + ee.ToString());
            }
        }
        void Task()
        {
            string ret = RequestTool.GetHtml("http://111.231.83.88:8888/v1/chain/get_info");
            infoRet = JsonConvert.DeserializeObject<Model.API.GetInfo>(ret);
            if (num > 5)
                num = num - 5;
            while (num <= int.Parse(infoRet.head_block_num))
            {                   
                try
                {
                    string postRet = RequestTool.PostResponse("http://111.231.83.88:8888/v1/chain/get_block", "{\"block_num_or_id\":\""+ num + "\"}", "application/json");
                     //LogUtil.WriteLog("========83行=====num: " + num + "---=================---" + postRet);
                    saveData(postRet);
                    num++;
                }
                catch (Exception ex)
                {
                     LogUtil.WriteLog("=======89行========" + ex.Message);
                    num++;
                }
            }
            //获取最大区块ID

            //获取交易信息
            //string postRet = RequestTool.PostResponse("http://111.231.83.88:8888/v1/chain/get_block", "{\"block_num_or_id\":\"" + infoRet.head_block_num + "\"}", "application/json");
            // LogUtil.WriteLog(postRet);
        }
        private void saveData(string data)
        {
            if (data.Contains("transfer") || data.Contains("newaccount"))
            {
                Bussiness.Extend_NewAccount_Record nAccbll = new Extend_NewAccount_Record();
                Model.Extend_NewAccount_Record nAccmodel = null;
                //Bussiness.Extend_PurseRecord bll = new Extend_PurseRecord();
                //Model.Extend_PurseRecord model = null;
                Bussiness.Extend_Transfer_Record bll = new Extend_Transfer_Record();
                Model.Extend_Transfer_Record model = null;
                Model.API.Root root = JsonConvert.DeserializeObject<Model.API.Root>(data);
                if (root.transactions != null && root.transactions.Count > 0)
                {
                    foreach (var item in root.transactions)
                    {
                        if (item.cpu_usage_us != 0)
                        {
                            if (item.trx.transaction.actions != null && item.trx.transaction.actions.Count > 0)
                            {
                                foreach (var item1 in item.trx.transaction.actions)
                                {
                                    if (item1.name == "transfer")
                                    {
                                        model = new Model.Extend_Transfer_Record();
                                        var serializer = new JavaScriptSerializer();
                                        //将json字符转换为实体对象
                                        var newData = serializer.Deserialize<Model.API.Data>(item1.data.ToString());
                                        model.Payer = newData.from;
                                        model.Remitter = newData.to;
                                        model.pay_fee = item.trx.transaction.fee.Split(' ')[0];
                                        model.Amount = newData.quantity.Split(' ')[0];
                                        model.Token_name = newData.quantity.Split(' ')[1];
                                        if (model.Token_name == "EOS") {
                                            model.Token_name = "LOS";
                                        }
                                        model.memo = newData.memo;
                                        model.Transaction_id = item.trx.id;
                                        model.block_num = root.block_num;
                                        model.blcok_time = DateTime.Parse(root.timestamp);
                                        bll.Add(model);
                                    } else if (item1.name == "newaccount") {
                                        nAccmodel = new Model.Extend_NewAccount_Record();
                                        string postRet = RequestTool.PostResponse("http://111.231.83.88:8888/v1/history/get_transaction", "{\"id\":\"" + item.trx.id + "\"}", "application/json");
                                        JObject jsonObj = JObject.Parse(postRet);
                                        JArray res = jsonObj.Value<JArray>("traces");
                                        JObject obj = JObject.Parse(res[0].ToString());
                                        JArray res1 = obj.Value<JArray>("account_ram_deltas");
                                        JObject obj1 = JObject.Parse(res1[0].ToString());

                                        nAccmodel.account = obj1.Value<string>("account");
                                        nAccmodel.actor = item.trx.transaction.actions[0].authorization[0].actor;
                                        nAccmodel.blcok_time = DateTime.Parse(root.timestamp);
                                        nAccmodel.Sys_time = DateTime.Now;
                                        nAccmodel.trx_id = item.trx.id;
                                        nAccbll.Add(nAccmodel);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            //else if (data.Contains("newaccount"))
            //{
            //    Bussiness.Extend_NewAccount_Record nAccbll = new Extend_NewAccount_Record();
            //    Model.Extend_NewAccount_Record nAccmodel = null;
            //    Model.NewAPI.Root root = JsonConvert.DeserializeObject<Model.NewAPI.Root>(data);
            //    if (root.transactions != null && root.transactions.Count > 0)
            //    {
            //        foreach (var item in root.transactions)
            //        {
            //            try
            //            {
            //                model = new Model.Extend_NewAccount_Record();
            //                string postRet = RequestTool.PostResponse("http://111.231.83.88:8888/v1/history/get_transaction", "{\"id\":\"" + item.trx.id + "\"}", "application/json");
            //                JObject jsonObj = JObject.Parse(postRet);
            //                JArray res = jsonObj.Value<JArray>("traces");
            //                JObject obj = JObject.Parse(res[0].ToString());
            //                JArray res1 = obj.Value<JArray>("account_ram_deltas");
            //                JObject obj1 = JObject.Parse(res1[0].ToString());

            //                model.account = obj1.Value<string>("account");
            //                model.actor = item.trx.transaction.actions[0].authorization[0].actor;
            //                model.blcok_time = DateTime.Parse(root.timestamp);
            //                model.Sys_time = DateTime.Now;
            //                model.trx_id = item.trx.id;
            //                bll.Add(model);
            //            }
            //            catch (Exception ex)
            //            {
                            
            //            }
                       
            //        }
            //    }
            //}
        }
        void Application_End(object sender, EventArgs e)
        {
            //  在应用程序关闭时运行的代码
            Thread.Sleep(1000);
            //这里设置你的web地址，可以随便指向你的任意一个aspx页面甚至不存在的页面，目的是要激发Application_Start  

            string url = "http://134.175.192.177:8080/app/manage.aspx";
      
   　      HttpWebRequest myHttpWebRequest = (HttpWebRequest)WebRequest.Create(url);

            HttpWebResponse myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse();

            Stream receiveStream = myHttpWebResponse.GetResponseStream();//得到回写的字节流  
        }

        void Application_Error(object sender, EventArgs e)
        {
            Exception erroy = Server.GetLastError();
            string err = "###出错页面是：###" + Request.Url.ToString() + "\n";
            err += "###异常信息：###" + erroy.Message + "\n";
            err += "###Source:###" + erroy.Source + "\n";
            err += "###StackTrace:###" + erroy.StackTrace + "\n";
            err += "###错误具体消息:###" + erroy.GetBaseException().Message + "\n";
            //清除前一个异常
            Server.ClearError();
            LogUtil.WriteLog(err, true);

        }

        void Session_Start(object sender, EventArgs e)
        {
            // 在新会话启动时运行的代码

        }

        void Session_End(object sender, EventArgs e)
        {
            // 在会话结束时运行的代码。 
            // 注意: 只有在 Web.config 文件中的 sessionstate 模式设置为
            // InProc 时，才会引发 Session_End 事件。如果会话模式设置为 StateServer 
            // 或 SQLServer，则不会引发该事件。

        }

    }
}
